//------------------------------------------------------------------------------
// <auto-generated>
//     Este codigo fue generado por el motor de generacion de codigo de propiedad de Walter molano.
//     El cambio  de algunas lineas de codigo podran causar comportamientos
//     inesperados de la aplicacion.  junio 18 de 2014.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 
using System;
using System.Collections.Generic;
using System.Linq;
using Applcations.MainModule.DocumentLibrary.IServices;
using Domain.MainModule.DocumentLibrary.Contracts;
using Domain.MainModules.Entities;
using Domain.Core.Specification;

namespace Applcations.MainModule.DocumentLibrary.Services
{
    public class SfTBL_ModuloDocumentosAnexos_ContenidoManagementServices : ISfTBL_ModuloDocumentosAnexos_ContenidoManagementServices
    {

         #region Fields
         readonly ITBL_ModuloDocumentosAnexos_ContenidoRepository _tblModuloDocumentosAnexosContenidoRepository;
         #endregion

         #region Constructor
         /// <summary>
         /// Constructor de la Calse 
         /// </summary>
         public SfTBL_ModuloDocumentosAnexos_ContenidoManagementServices( ITBL_ModuloDocumentosAnexos_ContenidoRepository tblModuloDocumentosAnexosContenidoRepository)
         {
            if (tblModuloDocumentosAnexosContenidoRepository == null)
                throw new ArgumentNullException("tblModuloDocumentosAnexosContenidoRepository");
            _tblModuloDocumentosAnexosContenidoRepository = tblModuloDocumentosAnexosContenidoRepository;
         }
         #endregion

         #region Members
         /// <summary>
         /// Crea una nueva instancia de la entidad 
         /// </summary>
         public TBL_ModuloDocumentosAnexos_Contenido NewEntity()
         {
            return new TBL_ModuloDocumentosAnexos_Contenido();
         }

         /// <summary>
         /// Inserta un nuevo registro en la Base de Datos.
         /// </summary>
         public void Add(TBL_ModuloDocumentosAnexos_Contenido entity)
         {
            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblModuloDocumentosAnexosContenidoRepository.UnitOfWork;
            _tblModuloDocumentosAnexosContenidoRepository.Add(entity);
            //Complete changes in this unit of work
            unitOfWork.Commit();
         }

          /// <summary>
          /// Actualiza el registro en la Base de Datos.
          /// </summary>
         public void Modify(TBL_ModuloDocumentosAnexos_Contenido entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Modificar : El objeto esta nulo."));

            var unitOfWork = _tblModuloDocumentosAnexosContenidoRepository.UnitOfWork;
            _tblModuloDocumentosAnexosContenidoRepository.Modify(entity);
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Elimina el registro en la Base de Datos.
          /// </summary>
         public void Remove(TBL_ModuloDocumentosAnexos_Contenido entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Eliminar : El objeto esta nulo."));

            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblModuloDocumentosAnexosContenidoRepository.UnitOfWork;

            _tblModuloDocumentosAnexosContenidoRepository.Remove(entity);

            //Complete changes in this unit of work
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Obtiene una Ãºnica entidad filtrada por ID.
          /// </summary>
         public TBL_ModuloDocumentosAnexos_Contenido FindById(int id)
         {
            if (id == 0)
                throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

            Specification<TBL_ModuloDocumentosAnexos_Contenido> specification = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IdContenido == id);

            return _tblModuloDocumentosAnexosContenidoRepository.GetEntityBySpec(specification);
           
         }

	

		

          /// <summary>
          /// Obtiene el listado de entidades activas.
          /// </summary>
         public List<TBL_ModuloDocumentosAnexos_Contenido> FindBySpec(bool isActive)
         {
            Specification<TBL_ModuloDocumentosAnexos_Contenido> specification = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IsActive == isActive);
            return _tblModuloDocumentosAnexosContenidoRepository.GetBySpec(specification).ToList();
         }

          /// <summary>
          /// Obtiene el listado de entidades activas y paginadas.
          /// </summary>
         public List<TBL_ModuloDocumentosAnexos_Contenido> FindPaged(int pageIndex, int pageCount)
         {
            if (pageIndex < 0)
                throw new ArgumentException(Resources.Messages.exception_InvalidPageIndex, "pageIndex");

            if (pageCount <= 0)
                throw new ArgumentException(Resources.Messages.exception_InvalidPageCount, "pageCount");


            Specification<TBL_ModuloDocumentosAnexos_Contenido> onlyEnabledSpec = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IsActive);

            return _tblModuloDocumentosAnexosContenidoRepository.GetPagedElements(pageIndex, pageCount, u => u.IdContenido, onlyEnabledSpec, true).ToList();
         }



         public TBL_ModuloDocumentosAnexos_Contenido AddContenido(byte[] attach, string nameFile, string contentType, string comentarios, string idUser)
         {
             var oContent = NewEntity();
             oContent.Adjunto = attach;
             oContent.Comentarios = comentarios;
             oContent.contentTypeC = contentType;
             oContent.CreatedBy = idUser;
             oContent.CreatedOn = DateTime.Now;
             oContent.IsActive = true;
             oContent.ModifiedBy = idUser;
             oContent.ModifiedOn = DateTime.Now;
             oContent.Nombre = nameFile;
             oContent.Revision = 1;
             Add(oContent);

             return oContent;
         }

         public List<TBL_ModuloDocumentosAnexos_Contenido> FindByIdFolder(int idFolder, string nombreArchivo, int pageIndex, int pageCount)
         {
             Specification<TBL_ModuloDocumentosAnexos_Contenido> specification = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IdContenido == idFolder);

             if (!string.IsNullOrEmpty(nombreArchivo))
             {
                 specification &= new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.Nombre.Contains(nombreArchivo));
             }

             return _tblModuloDocumentosAnexosContenidoRepository.GetPagedElements(pageIndex, pageCount, u => u.IdContenido, specification, true).ToList();


         }

         public int CountByIdFolder(int idFolder, string nombreArchivo)
         {
             Specification<TBL_ModuloDocumentosAnexos_Contenido> specification = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IdContenido == idFolder);

             if (!string.IsNullOrEmpty(nombreArchivo))
             {
                 specification &= new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.Nombre.Contains(nombreArchivo));
             }

             return _tblModuloDocumentosAnexosContenidoRepository.GetBySpec(specification).Count();


         }

         public bool BulkDeleteFromId(int id)
         {
             var specification = new DirectSpecification<TBL_ModuloDocumentosAnexos_Contenido>(u => u.IdContenido == id);
             var res = _tblModuloDocumentosAnexosContenidoRepository.BulkDeletebySpec(specification);
             return res > 0;
         }
         #endregion

         #region IDisposable Members

        /// <summary>
        /// Release all resources
        /// </summary>
        public void Dispose()
        {
            //release used unit of work
            //if you have many repositories but  lifetime is per resolve only need
            //dispose one

            if (_tblModuloDocumentosAnexosContenidoRepository != null)
            {
                _tblModuloDocumentosAnexosContenidoRepository.UnitOfWork.Dispose();
            }
        }

        #endregion
    }
}
    