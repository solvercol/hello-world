//------------------------------------------------------------------------------
// <auto-generated>
//     Este codigo fue generado por el motor de generacion de codigo de propiedad de Walter molano.
//     El cambio  de algunas lineas de codigo podran causar comportamientos
//     inesperados de la aplicacion.  junio 18 de 2014.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Transactions;
using Application.MainModule.SqlServices.IServices;
using Applications.MainModule.WorkFlow.DTO;
using Applications.MainModule.WorkFlow.IServices;
using Applications.MainModule.WorkFlow.Resources;
using Applications.MainModule.WorkFlow.Util;
using Domain.Core;
using Domain.MainModule.AccionesPC.Contracts;
using Domain.MainModule.Contracts;
using Domain.MainModule.Reclamos.Contracts;
using Domain.MainModule.Reclamos.Services;
using Domain.MainModule.WorkFlow.Contracts;
using Domain.MainModule.WorkFlow.Enums;
using Domain.MainModule.WorkFlow.Services.FieldsValidatos;
using Domain.MainModule.WorkFlow.Services.WorkFlow;
using Domain.MainModules.Entities;
using Domain.Core.Specification;
using Infraestructure.CrossCutting.Security.IServices;
using Infrastructure.CrossCutting;
using Infrastructure.CrossCutting.IDtoService;
using Infrastructure.CrossCutting.Logging;
using Infrastructure.CrossCutting.NetFramework.Enums;
using Infrastructure.CrossCutting.NetFramework.Services.RunAssemblies;
using IsolationLevel = System.Transactions.IsolationLevel;

namespace Applications.MainModule.WorkFlow.Services
{
    public class SfTBL_ModuloWorkFlow_RutasManagementServices : ISfTBL_ModuloWorkFlow_RutasManagementServices
    {

        #region Fields
        private readonly ITBL_ModuloWorkFlow_RutasRepository _tblModuloWorkFlowRutasRepository;
        private readonly ITBL_ModuloReclamos_ReclamoRepository _tblDocumentosRepository;
        private readonly ITBL_Admin_EstadosProcesoRepository _estadosRepository;
        private readonly ITblModuloWorkFlowRutasFieldsValidatorDomainServices _workFlowDomainFieldsValidatorServices;
        private readonly ITblModuloWorkFlowRutaDomainServices _workFlowDomainServices;
        private readonly IAutentication _autenticationService;
        private readonly ITBL_Admin_UsuariosRepository _usuariosRepository;
        private readonly ITBL_Admin_SistemaNotificacionesRepository _notificacionesSistemaRepository;
        private readonly ISendMailNotification _sendMailNotificationServices;
        private readonly IReclamosAdoService _sqlReclamosServices;
        private readonly ITBL_Moduloreclamos_ReclamoDomainServices _reclamosDomainServices;
        private readonly ITBL_ModuloReclamos_TrackingRepository _trackRepository;
        private readonly ITBL_ModuloReclamos_LogReclamosRepository _logDocumentosRepository;
        private readonly ISystemActionsManagementServices _systemActionsServices;
        readonly ITraceManager _traceManager;
        private readonly ITBL_ModuloAPC_SolicitudRepository _solicitudesRepository;
        #endregion

         #region Constructor
         /// <summary>
         /// Constructor de la Calse 
         /// </summary>
         public SfTBL_ModuloWorkFlow_RutasManagementServices( 
             ITBL_ModuloWorkFlow_RutasRepository tblModuloWorkFlowRutasRepository, 
             ITBL_Admin_EstadosProcesoRepository estadosRepository,
             ITblModuloWorkFlowRutasFieldsValidatorDomainServices workFlowDomainFieldsValidatorServices, 
             ITblModuloWorkFlowRutaDomainServices workFlowDomainServices, 
             IAutentication autenticationService, 
             ITBL_Admin_UsuariosRepository usuariosRepository, 
             ITBL_Admin_SistemaNotificacionesRepository notificacionesSistemaRepository, 
             ISendMailNotification sendMailNotificationServices,
             ITBL_ModuloReclamos_ReclamoRepository tblDocumentosRepository, 
             IReclamosAdoService sqlReclamosServices, 
             ITBL_Moduloreclamos_ReclamoDomainServices reclamosDomainServices, 
             ITBL_ModuloReclamos_TrackingRepository trackRepository,
             ISystemActionsManagementServices systemActionsServices, 
             ITBL_ModuloReclamos_LogReclamosRepository logDocumentosRepository, 
             ITraceManager traceManager, 
             ITBL_ModuloAPC_SolicitudRepository solicitudesRepository)
         {
            if (tblModuloWorkFlowRutasRepository == null)
                throw new ArgumentNullException("tblModuloWorkFlowRutasRepository");
            _tblModuloWorkFlowRutasRepository = tblModuloWorkFlowRutasRepository;
             _solicitudesRepository = solicitudesRepository;
             _traceManager = traceManager;
             _logDocumentosRepository = logDocumentosRepository;
             _systemActionsServices = systemActionsServices;
             _trackRepository = trackRepository;
             _reclamosDomainServices = reclamosDomainServices;
             _sqlReclamosServices = sqlReclamosServices;
             _tblDocumentosRepository = tblDocumentosRepository;
             _sendMailNotificationServices = sendMailNotificationServices;
             _notificacionesSistemaRepository = notificacionesSistemaRepository;
             _usuariosRepository = usuariosRepository;
             _autenticationService = autenticationService;
             _workFlowDomainServices = workFlowDomainServices;
             _workFlowDomainFieldsValidatorServices = workFlowDomainFieldsValidatorServices;
             _estadosRepository = estadosRepository;

         }
         #endregion

         #region Members Work Flow
         /// <summary>
         /// Crea una nueva instancia de la entidad 
         /// </summary>
         public TBL_ModuloWorkFlow_Rutas NewEntity()
         {
            return new TBL_ModuloWorkFlow_Rutas();
         }

         /// <summary>
         /// Inserta un nuevo registro en la Base de Datos.
         /// </summary>
         public void Add(TBL_ModuloWorkFlow_Rutas entity)
         {
            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblModuloWorkFlowRutasRepository.UnitOfWork;
            _tblModuloWorkFlowRutasRepository.Add(entity);
            //Complete changes in this unit of work
            unitOfWork.Commit();
         }

          /// <summary>
          /// Actualiza el registro en la Base de Datos.
          /// </summary>
         public void Modify(TBL_ModuloWorkFlow_Rutas entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Modificar : El objeto esta nulo."));

            var unitOfWork = _tblModuloWorkFlowRutasRepository.UnitOfWork;
            _tblModuloWorkFlowRutasRepository.Modify(entity);
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Elimina el registro en la Base de Datos.
          /// </summary>
         public void Remove(TBL_ModuloWorkFlow_Rutas entity)
         {
            if (entity == null)
                throw new ArgumentNullException(string.Format("Eliminar : El objeto esta nulo."));

            //Begin unit of work ( if Transaction is required init here a new TransactionScope element
            var unitOfWork = _tblModuloWorkFlowRutasRepository.UnitOfWork;

            _tblModuloWorkFlowRutasRepository.Remove(entity);

            //Complete changes in this unit of work
            unitOfWork.CommitAndRefreshChanges();
         }

          /// <summary>
          /// Obtiene una Ãºnica entidad filtrada por ID.
          /// </summary>
         public TBL_ModuloWorkFlow_Rutas FindById(int id)
         {
            if (id == 0)
                throw new ArgumentNullException(string.Format("Busqueda por Id : El parametro es nulo."));

            Specification<TBL_ModuloWorkFlow_Rutas> specification = new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(u => u.IdRuta == id);

            return _tblModuloWorkFlowRutasRepository.GetEntityBySpec(specification);
           
         }
	

          /// <summary>
          /// Obtiene el listado de entidades activas.
          /// </summary>
         public List<TBL_ModuloWorkFlow_Rutas> FindBySpec(bool isActive)
         {
            Specification<TBL_ModuloWorkFlow_Rutas> specification = new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(u => u.IsActive == isActive);
            return _tblModuloWorkFlowRutasRepository.GetBySpec(specification).ToList();
         }

          /// <summary>
          /// Obtiene el listado de entidades activas y paginadas.
          /// </summary>
         public List<TBL_ModuloWorkFlow_Rutas> FindPaged(int pageIndex, int pageCount)
         {
            if (pageIndex < 0)
                throw new ArgumentException(Messages.exception_InvalidPageIndex, "pageIndex");

            if (pageCount <= 0)
                throw new ArgumentException(Messages.exception_InvalidPageCount, "pageCount");


            Specification<TBL_ModuloWorkFlow_Rutas> onlyEnabledSpec = new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(u => u.IsActive);

            return _tblModuloWorkFlowRutasRepository.GetPagedElements(pageIndex, pageCount, u => u.IdRuta, onlyEnabledSpec, true).ToList();
         }

         public IEnumerable<TBL_ModuloWorkFlow_Rutas> ListadoRutasPorIdModule(ModulosAplicacion  module)
         {
             var strModule = module.ToString();
             var specification = new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(u => u.IsActive && u.TipoModulo.Equals(strModule));
             return _tblModuloWorkFlowRutasRepository.FindRutasBySpec(specification).ToList();
         }

         public List<TBL_ModuloWorkFlow_Rutas> FindBySpec(int idRuta)
         {
             Specification<TBL_ModuloWorkFlow_Rutas> specification = new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(u => u.IdRuta == idRuta);
             return _tblModuloWorkFlowRutasRepository.FindRutasBySpec(specification).ToList();
         }


         public IEnumerable<TBL_ModuloWorkFlow_Rutas> GetRutasByEstadoByModule(int idEstadoDocumento, ModulosAplicacion module)
         {
             var strModule = module.ToString();
             var specification =
                 new DirectSpecification<TBL_ModuloWorkFlow_Rutas>(
                     u => u.IsActive && u.IdEstado == idEstadoDocumento && u.TipoModulo.Equals(strModule));
             return _tblModuloWorkFlowRutasRepository.FindRutasBySpec(specification).OrderBy(x=> x.Secuencia).ToList();

         }


        #endregion

         #region Members RECLAMOS

         private DataTable GetDocumentWorkFlowById(string id, ModulosAplicacion module)
        {
            return _sqlReclamosServices.GetDocumentWorkFlowById(id, module);
        }
         #endregion

        public RenderTypeControlButtonDto CambiarIngenieroResponsable(RenderTypeControlButtonDto oDocument)
        {
            try
            {

                if (string.IsNullOrEmpty(oDocument.IdDocument))
                {
                    oDocument.MessagesError = new List<string> { "Error de lectura del identificador del reclamo" };
                    return oDocument;
                }

                if (oDocument.Parameters.Count == 0)
                {
                    oDocument.MessagesError = new List<string> { "No se han especificado los parametros de entrada (Comentarios)" };
                    return oDocument;
                }


                string strComment;
                var result = oDocument.Parameters.TryGetValue("Comentario", out strComment);
                if (!result)
                {
                    oDocument.MessagesError = new List<string> { "Error al leer el comentario ingresado en la reasignaciÃ³n del ingeniero." };
                    return oDocument;
                }

                string idIngeniero;
                result = oDocument.Parameters.TryGetValue("IdIngeniero", out idIngeniero);
                if (!result)
                {
                    oDocument.MessagesError = new List<string> { "Error al obtener el ID del Ingeniero seleccionado." };
                    return oDocument;
                }

                string nombreIngeniero;
                result = oDocument.Parameters.TryGetValue("NombreIngeniero", out nombreIngeniero);
                if (!result)
                {
                    oDocument.MessagesError = new List<string> { "Error al leer el Nombre del Ingeniero seleccionado." };
                    return oDocument;
                }


                var oReclamo = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oReclamo == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al recuperar el reclamo desde la Base de Datos" };
                    return oDocument;
                }

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                //TODO: se actualiza el ingeniero responsable que es  el siguiente responsable del documento.
                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    var ingenieroAnterior = oReclamo.TBL_Admin_Usuarios4 == null
                                                ? string.Empty
                                                : oReclamo.TBL_Admin_Usuarios4.Nombres;

                    oReclamo.IdIngenieroResponsable = Convert.ToInt32(idIngeniero);

                    oReclamo.IdResponsableActual = Convert.ToInt32(idIngeniero);

                    oReclamo.ModifiedOn = DateTime.Now;

                    oReclamo.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    _tblDocumentosRepository.Modify(oReclamo);

                    //Crea un nuevo registro en el log del reclamo.
                    var mensaje =
                        string.Format(
                            "El Reclamo fue Re-Asignado por el siguiente motivo: [{0}]. Ingeniero Anterior: [{1}] - Ingeniero Asignado:[{2}]",
                            strComment, ingenieroAnterior, nombreIngeniero);

                    GenerarEntradalog(mensaje,oReclamo.IdReclamo);

                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("CancelarReclamo", ex);
            }

            oDocument.Processestaus = "Ok";
            return oDocument;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto CancelarReclamo(RenderTypeControlButtonDto oDocument)
        {
            try
            {

                if (string.IsNullOrEmpty(oDocument.IdDocument))
                {
                    oDocument.MessagesError = new List<string> { "Error de lectura del identificador del reclamo" };
                    return oDocument;
                }

                if (oDocument.Parameters.Count == 0)
                {
                    oDocument.MessagesError = new List<string> { "No se han especificado los parametros de entrada (Comentarios)" };
                    return oDocument;
                }


                string strComment;
                var result = oDocument.Parameters.TryGetValue("Comentario", out strComment);
                if (!result)
                {
                    oDocument.MessagesError = new List<string> { "Error al leer el comentario ingresado en la cancelaciÃ³n del reclamo." };
                    return oDocument;
                }

                var estadoCancelado = _estadosRepository.GetEstadoByName("Cancelado");
                if (estadoCancelado == null)
                {
                    oDocument.MessagesError = new List<string> { string.Format("Error al obtener el estado CANCELADO desde la Base de Datos") };
                    return oDocument;
                }

                var oReclamo = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oReclamo == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al recuperar el reclamo desde la Base de Datos" };
                    return oDocument;
                }

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                //TODO: se actualiza el ingeniero responsable que es  el siguiente responsable del documento.
                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oReclamo.IdResponsableActual =null;

                    oReclamo.IdEstado = estadoCancelado.IdEstado;

                    oReclamo.ModifiedOn = DateTime.Now;

                    oReclamo.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    _tblDocumentosRepository.Modify(oReclamo);

                    //Crea un nuevo registro en el log del reclamo.
                    oDocument.TextControl = estadoCancelado.Descripcion;
                    GenerarEntradalog(oDocument, strComment);

                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }


                try
                {
                    oDocument.Comentarios = strComment;
                    var userSession = _autenticationService.GetUserFromSession;
                    _sendMailNotificationServices.EnviarCorreoelectronicoRechazoReclamo(oDocument, userSession);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al generar la notificaciÃ³n para el reclamo. Error: {0}", ex.Message), LogType.Notify);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("CancelarReclamo", ex);
            }

            oDocument.Processestaus = "Ok";
            return oDocument;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto DevolverReclamo(RenderTypeControlButtonDto oDocument)
        {
            try
            {

                if (string.IsNullOrEmpty(oDocument.IdDocument))
                {
                    oDocument.MessagesError = new List<string> { "Error de lectura del identificador del reclamo" };
                    return oDocument;
                }

                if (oDocument.Parameters.Count == 0)
                {
                    oDocument.MessagesError = new List<string> { "No se han especificado los parametros de entrada (Comentarios)" };
                    return oDocument;
                }


                string strComment;

                var result = oDocument.Parameters.TryGetValue("Comentario", out strComment);
                if(!result)
                {
                    oDocument.MessagesError = new List<string> { "Error al leer el comentario ingresado en la devoluciÃ³n del reclamo." };
                    return oDocument;
                }

                var oTrack = _trackRepository.GetLastTrackByIdreclamo(Convert.ToDecimal(oDocument.IdDocument));

                if(oTrack == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al leer el tracking asociado al reclamo." };
                    return oDocument;
                }


                var estadoAnterior = _estadosRepository.GetEstadoByName(oTrack.EstadoAnterior);
                if(estadoAnterior == null)
                {
                    oDocument.MessagesError = new List<string> { string.Format("Error al obtener el estado {0} desde la Base de Datos",oTrack.EstadoAnterior) };
                    return oDocument;
                }

                var responsableAnterior = _usuariosRepository.GetUsuarioByName(oTrack.Autor);
                if(responsableAnterior == null)
                {
                    oDocument.MessagesError = new List<string> { string.Format("Error al obtener el usuario responsable [{0}] del estado [{1}] desde la Base de Datos", oTrack.Autor, oTrack.EstadoAnterior) };
                    return oDocument;
                }
                

                var oReclamo = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oReclamo == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al recuperar el reclamo desde la Base de Datos" };
                    return oDocument;
                }

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                //TODO: se actualiza el ingeniero responsable que es  el siguiente responsable del documento.
                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oReclamo.IdResponsableActual = responsableAnterior.IdUser;

                    oReclamo.IdEstado = estadoAnterior.IdEstado;

                    oReclamo.ModifiedOn = DateTime.Now;

                    oReclamo.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    _tblDocumentosRepository.Modify(oReclamo);

                    oDocument.TextControl = "DevoluciÃ³n Reclamo";
                    oDocument.CurrentResponsibe = oTrack.NuevoResponsable;
                    oDocument.CurrentStatus = oTrack.Nuevoestado;
                    oDocument.NextStatus = estadoAnterior.Descripcion;
                    oDocument.NextResponsibe = responsableAnterior.Nombres;
                    oDocument.IdCurrentResponsibe = responsableAnterior.IdUser.ToString();
                    oDocument.Comentarios = strComment;

                    //Crea un nuevo registro en el tracking del reclamo
                    GenerarEntradatracking(oDocument);

                    //Crea un nuevo registro en el log del reclamo.
                    oDocument.TextControl = estadoAnterior.Descripcion;
                    GenerarEntradalog(oDocument, strComment);

                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }


                try
                {
                    GenerarNotificacionSistema(oDocument);
                    var userSession = _autenticationService.GetUserFromSession;
                    _sendMailNotificationServices.EnviarCorreoelectronicoDevolucion(oDocument, userSession);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al generar la notificaciÃ³n para el reclamo. Error: {0}", ex.Message), LogType.Notify);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("DevolverReclamo", ex);
            }

            oDocument.Processestaus = "Ok";
            return oDocument;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto ActualizarIngenieroResponsable(RenderTypeControlButtonDto oDocument)
        {
            try
            {

                if (string.IsNullOrEmpty(oDocument.IdDocument))
                {
                    oDocument.MessagesError = new List<string> { "Error de lectura del identificador del reclamo" };
                    return oDocument;
                }

                if (oDocument.Parameters.Count == 0)
                {
                    oDocument.MessagesError = new List<string> { "No se han especificado los parametros de entrada (Ingeniero Seleccionado)" };
                    return oDocument;
                }


                string strIdIngeniero;

                oDocument.Parameters.TryGetValue("IdIngeniero", out strIdIngeniero);


                var oReclamo = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oReclamo == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al recuperar el reclamo desde la Base de Datos" };
                    return oDocument;
                }

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                //TODO: se actualiza el ingeniero responsable que es  el siguiente responsable del documento.
                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oReclamo.IdIngenieroResponsable = Convert.ToInt32(strIdIngeniero);

                    oReclamo.IdResponsableActual = Convert.ToInt32(strIdIngeniero);

                    oReclamo.ModifiedOn = DateTime.Now;

                    oReclamo.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    oReclamo.IdEstado = Convert.ToInt32(oDocument.IdNextStatus);

                    _tblDocumentosRepository.Modify(oReclamo);
                    
                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }

                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    var dtReclamo = GetDocumentWorkFlowById(oDocument.IdDocument, ModulosAplicacion.Reclamos);

                    var nextResponsable = RetornarSiguienteUsuarioResponsable(oDocument.FormulaNextresponsible,
                                                                              Convert.ToInt32(oDocument.IdDocument),
                                                                              dtReclamo);

                    oReclamo.IdResponsableActual = nextResponsable.IdUser;

                    oDocument.NextResponsibe = nextResponsable.Nombres;

                    _tblDocumentosRepository.Modify(oReclamo);

                    //Crea un nuevo registro en el tracking del reclamo
                    GenerarEntradatracking(oDocument);

                    //Crea un nuevo registro en el log del reclamo.
                    GenerarEntradalog(oDocument);

                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }

                try
                {
                    GenerarNotificacionSistema(oDocument);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al generar la notificaciÃ³n para el reclamo. Error: {0}", ex.Message), LogType.Notify);
                }

                try
                {
                    SendMail(oDocument);

                    var userSession = _autenticationService.GetUserFromSession;
                    _sendMailNotificationServices.EnviarCorreoElectronicoNotificacionCliente(oDocument, userSession);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al enviar el Correo electronico. Error: {0}", ex.Message), LogType.Notify);
                }

            }
            catch (Exception ex)
            {
                throw new Exception("ActualizarIngenieroResponsable", ex);
            }

            oDocument.Processestaus = "Ok";
            return oDocument;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto CategorizarReclamo(RenderTypeControlButtonDto oDocument)
        {
            try
            {

                if (string.IsNullOrEmpty(oDocument.IdDocument))
                {
                    oDocument.MessagesError = new List<string> { "Error de lectura del identificador del reclamo" };
                    return oDocument;
                }

                if (oDocument.Parameters.Count == 0)
                {
                    oDocument.MessagesError = new List<string> { "No se han especificado los parametros de entrada (Ingeniero Seleccionado)" };
                    return oDocument;
                }


                string strIdcategoria;
                oDocument.Parameters.TryGetValue("Idcategoria", out strIdcategoria);

                string strArea;
                oDocument.Parameters.TryGetValue("Area", out strArea);

                var oReclamo = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oReclamo == null)
                {
                    oDocument.MessagesError = new List<string> { "Error al recuperar el reclamo desde la Base de Datos" };
                    return oDocument;
                }

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {

                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oReclamo.Area =strArea;

                    if (!string.IsNullOrEmpty(strIdcategoria))
                        oReclamo.IdCategoriaReclamo = Convert.ToInt32(strIdcategoria);

                    oReclamo.ModifiedOn = DateTime.Now;

                    oReclamo.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    if (!string.IsNullOrEmpty(oDocument.IdNextStatus))
                        oReclamo.IdEstado = Convert.ToInt32(oDocument.IdNextStatus);

                    if (!string.IsNullOrEmpty(oDocument.IdNextResponsibe))
                        oReclamo.IdResponsableActual = Convert.ToInt32(oDocument.IdNextResponsibe);
                    else
                        oReclamo.IdResponsableActual = null;

                    _tblDocumentosRepository.Modify(oReclamo);

                    //Crea un nuevo registro en el tracking del reclamo
                    GenerarEntradatracking(oDocument);

                    //Crea un nuevo registro en el log del reclamo.
                    GenerarEntradalog(oDocument);

                    GenerarNotificacionSistema(oDocument);

                    unitOfWork.CommitAndRefreshChanges();

                    scope.Complete();
                }


                try
                {
                    SendMail(oDocument);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al enviar el Correo electronico. Error: {0}", ex.Message), LogType.Notify);
                }

            }
            catch (Exception ex)
            {
                throw new Exception("ActualizarIngenieroResponsable", ex);
            }

            oDocument.Processestaus = "Ok";
            return oDocument;
        }

        /// <summary>
        /// Carga los parametros iniciales aplicando las reglas de validaciÃ³nn definidas en las rutas.
        /// </summary>
        /// <param name="idDocument"></param>
        /// <param name="module"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto CargarWorkFlow(string idDocument, ModulosAplicacion module)
        {

            try
            {

                var estadoDocumento = _sqlReclamosServices.EstadoDocumento(idDocument, module);

                if (string.IsNullOrEmpty(estadoDocumento))
                    throw new Exception("Error al obtener el estado del reclamo desde la Base de Datos.");

                //Se listan los campos involucrados en el Work Flow con el fin de mapearlos y posteriormente evaluar su
                //contenido.
                var dtDocumento = GetDocumentWorkFlowById(idDocument, module);

                var listadoRutas = GetRutasByEstadoByModule(Convert.ToInt32(estadoDocumento), module);

                var odoc = new RenderTypeControlButtonDto { IdDocument = idDocument, CurrentStatus = estadoDocumento };

                var oWorkflow = _workFlowDomainServices.CargarWorkFlow(listadoRutas, dtDocumento, odoc);

                if (oWorkflow == null) return null;
               
                var nextResponsable = RetornarSiguienteUsuarioResponsable(oWorkflow.RoleNextResponsible, Convert.ToInt32(idDocument), dtDocumento);

                var currentResponsible = RetornarResponsableDocumento(Convert.ToInt32(idDocument));

                var oRender = new RenderTypeControlButtonDto
                                  {
                                      CurrentStatus = oWorkflow.CurrentStatus,
                                      IdCurrentStatus = estadoDocumento,
                                      NextStatus = oWorkflow.NextStatus,
                                      IdNextStatus = oWorkflow.IdNextStatus,
                                      TextControl = oWorkflow.TextControl,
                                      IdDocument = idDocument,
                                      CurrentResponsibe = currentResponsible == null ? string.Empty : currentResponsible.Nombres,
                                      IdCurrentResponsibe = currentResponsible == null ? string.Empty : currentResponsible.IdUser.ToString(),
                                      EmailCurrentResponsibe = currentResponsible == null ? string.Empty : currentResponsible.Email,
                                      NextResponsibe = nextResponsable == null ? string.Empty : nextResponsable.Nombres,
                                      IdNextResponsibe = nextResponsable == null ? string.Empty : nextResponsable.IdUser.ToString(),
                                      EmailNextResponsibe = nextResponsable == null ? string.Empty : nextResponsable.Email,
                                      OrdenCompra = odoc.OrdenCompra,
                                      Cliente = odoc.Cliente,
                                      FormulaNextresponsible = oWorkflow.RoleNextResponsible,
                };

                return oRender;
            }
            catch (Exception ex)
            {
                throw new Exception("CargarWorkFlow", ex);
            }
        }

        /// <summary>
        /// Ejecuta el WorkFlow realizando validaciones y dependiendo del resultado de las mismas, se actualiza  o no el pedido.
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto EjecutarWorkFlow(RenderTypeControlButtonDto oDocument)
        {
            try
            {


                if (oDocument == null) return null;

                var oEstado = _estadosRepository.GetEstadoById(Convert.ToInt32(oDocument.IdCurrentStatus));

                if (oEstado == null)
                    throw new ArgumentException(string.Format("Error al recuperar el estado {0} desde la Base de Datos.", oDocument.CurrentStatus));

                var oDoc = _tblDocumentosRepository.GetReclamoById(Convert.ToInt32(oDocument.IdDocument));

                if (oDoc == null)
                    throw new ArgumentException(string.Format("Error al recuperar el reclamo {0} desde la Base de Datos.", oDocument.IdDocument));

                if (oDoc.IdEstado == Convert.ToInt32(oDocument.IdNextStatus)) return oDocument;

                oDocument.TipoReclamo = oDoc.TipoReclamo;

                var nextStatus = Convert.ToInt32(oDocument.IdNextStatus);
                var currentRule = oEstado.TBL_ModuloWorkFlow_Rutas.Where(x => x.SiguienteEstado == nextStatus).SingleOrDefault();

                if (currentRule.ValidaRequeridos)
                {
                    if (oEstado.TBL_ModuloWorkFlow_CamposValidacion.Count > 0)
                    {
                        var result = ValidacionDeCampos(oEstado, oDoc, oDocument);
                        if (!result)
                        {
                            oDocument.Processestaus = ProcessStatus.ValidationErrorField.ToString();
                            return oDocument;
                        }
                    }
                    else
                    {
                        var mensaje = string.Format(Messages.NotFieldValidations, currentRule.IdRuta, currentRule.IdEstado);
                        oDocument.MessagesError.Add(mensaje);
                    }
                }

                //todo: Ejecutan Logica implementada en clases que son inyectadas en tiempo de ejecuciÃ³n.
                if (currentRule.TBL_ModuloWorkFlow_ValidacionesSalida.Where(x => x.Ejecutar == false).Count() > 0)
                {
                    var inputParameters = currentRule
                         .TBL_ModuloWorkFlow_ValidacionesSalida
                         .Where( x => DefinedRegexEvaluation.InputParameters.Match(x.NombreMetodo).Success);

                    if (inputParameters.Count() > 0 )
                    {
                        //Los parametros de entrada rompen el flujo de la aplicaciÃ³n para lanzar ventanas de captura y proceguir con el flujo 
                        //desde otro formulario.
                        ProcesarParametrosEntrada(oDocument, currentRule.TBL_ModuloWorkFlow_ValidacionesSalida, oDoc);

                        if(oDocument.MessagesError != null)
                        {
                            if (oDocument.MessagesError.Count > 0)
                            {
                                oDocument.Processestaus = ProcessStatus.ValidationErrorSystemActions.ToString();
                                return oDocument;
                            }
                        }
                        if(oDocument.OutputParameters.Count > 0)
                        {
                            oDocument.Processestaus = ProcessStatus.InputParameters.ToString();
                            return oDocument;
                        }
                    }
                }

                var listerror = EjecutarAccionSistema(currentRule.TBL_ModuloWorkFlow_ValidacionesSalida.Where(x => x.Ejecutar == true).ToList(), oDocument);
                if (listerror.Count > 0)
                {
                    oDocument.MessagesError = listerror;
                    oDocument.Processestaus = ProcessStatus.ValidationErrorSystemActions.ToString();
                    return oDocument;
                }
                

                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {
                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oDoc.IdEstado = Convert.ToInt32(oDocument.IdNextStatus);

                    oDoc.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    oDoc.ModifiedOn = DateTime.Now;

                    if (!string.IsNullOrEmpty(oDocument.IdNextResponsibe))
                        oDoc.IdResponsableActual = Convert.ToInt32(oDocument.IdNextResponsibe);
                    else
                        oDoc.IdResponsableActual = null;

                    _tblDocumentosRepository.Modify(oDoc);

                    //Crea un nuevo registro en el tracking del pedido
                    GenerarEntradatracking(oDocument);

                    //Crea un nuevo registro en el log del pedido.
                    GenerarEntradalog(oDocument);

                    GenerarNotificacionSistema(oDocument);

                    unitOfWork.CommitAndRefreshChanges();

                    oDocument.Processestaus = ProcessStatus.Ok.ToString();

                    scope.Complete();
                }

                try
                {
                    SendMail(oDocument);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al enviar el Correo electronico. Error: {0}", ex.Message), LogType.Notify);
                }
               

                return oDocument;

            }
            catch (Exception ex)
            {
                throw new Exception("EjecutarWorkFlow", ex);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        public RenderTypeControlButtonDto EjecutarWorkFlowModuloSolicitudes(RenderTypeControlButtonDto oDocument)
        {
            try
            {


                if (oDocument == null) return null;

                var oEstado = _estadosRepository.GetEstadoById(Convert.ToInt32(oDocument.IdCurrentStatus));

                if (oEstado == null)
                    throw new ArgumentException(string.Format("Error al recuperar el estado {0} desde la Base de Datos.", oDocument.CurrentStatus));

                var oDoc = _solicitudesRepository.GetSolicitudById(Convert.ToInt32(oDocument.IdDocument));

                if (oDoc == null)
                    throw new ArgumentException(string.Format("Error al recuperar la solicitud {0} desde la Base de Datos.", oDocument.IdDocument));

                if (oDoc.IdEstado == Convert.ToInt32(oDocument.IdNextStatus)) return oDocument;

                var nextStatus = Convert.ToInt32(oDocument.IdNextStatus);

                var currentRule = oEstado.TBL_ModuloWorkFlow_Rutas.Where(x => x.SiguienteEstado == nextStatus).SingleOrDefault();

                if (currentRule.ValidaRequeridos)
                {
                    if (oEstado.TBL_ModuloWorkFlow_CamposValidacion.Count > 0)
                    {
                        var result = ValidacionDeCampos(oDoc,oEstado, oDocument);
                        if (!result)
                        {
                            oDocument.Processestaus = ProcessStatus.ValidationErrorField.ToString();
                            return oDocument;
                        }
                    }
                    else
                    {
                        var mensaje = string.Format(Messages.NotFieldValidations, currentRule.IdRuta, currentRule.IdEstado);
                        oDocument.MessagesError.Add(mensaje);
                    }
                }

                //todo: Ejecutan Logica implementada en clases que son inyectadas en tiempo de ejecuciÃ³n.
                if (currentRule.TBL_ModuloWorkFlow_ValidacionesSalida.Where(x => x.Ejecutar == false).Count() > 0)
                {
                    var inputParameters = currentRule
                         .TBL_ModuloWorkFlow_ValidacionesSalida
                         .Where(x => DefinedRegexEvaluation.InputParameters.Match(x.NombreMetodo).Success);

                    if (inputParameters.Count() > 0)
                    {
                        //Los parametros de entrada rompen el flujo de la aplicaciÃ³n para lanzar ventanas de captura y proceguir con el flujo 
                        //desde otro formulario.
                        ProcesarParametrosEntrada(oDocument, currentRule.TBL_ModuloWorkFlow_ValidacionesSalida, oDoc);

                        if (oDocument.MessagesError != null)
                        {
                            if (oDocument.MessagesError.Count > 0)
                            {
                                oDocument.Processestaus = ProcessStatus.ValidationErrorSystemActions.ToString();
                                return oDocument;
                            }
                        }
                        if (oDocument.OutputParameters.Count > 0)
                        {
                            oDocument.Processestaus = ProcessStatus.InputParameters.ToString();
                            return oDocument;
                        }
                    }
                }

                var listerror = EjecutarAccionSistema(currentRule.TBL_ModuloWorkFlow_ValidacionesSalida.Where(x => x.Ejecutar == true).ToList(), oDocument);
                if (listerror.Count > 0)
                {
                    oDocument.MessagesError = listerror;
                    oDocument.Processestaus = ProcessStatus.ValidationErrorSystemActions.ToString();
                    return oDocument;
                }


                var txSettings = new TransactionOptions
                {
                    Timeout = TransactionManager.DefaultTimeout,
                    IsolationLevel = IsolationLevel.Serializable
                };

                using (var scope = new TransactionScope(TransactionScopeOption.Required, txSettings))
                {
                    var unitOfWork = _tblDocumentosRepository.UnitOfWork;

                    oDoc.IdEstado = Convert.ToInt32(oDocument.IdNextStatus);

                    oDoc.ModifiedBy = _autenticationService.GetUserFromSession.IdUser;

                    oDoc.ModifiedOn = DateTime.Now;

                    if (!string.IsNullOrEmpty(oDocument.IdNextResponsibe))
                        oDoc.IdResponsableActual = Convert.ToInt32(oDocument.IdNextResponsibe);
                    //else
                    //    oDoc.IdResponsableActual = null;

                    _solicitudesRepository.Modify(oDoc);

                    //Crea un nuevo registro en el tracking del pedido
                    GenerarEntradatracking(oDocument);

                    //Crea un nuevo registro en el log del pedido.
                    GenerarEntradalog(oDocument);

                    GenerarNotificacionSistema(oDocument);

                    unitOfWork.CommitAndRefreshChanges();

                    oDocument.Processestaus = ProcessStatus.Ok.ToString();

                    scope.Complete();
                }

                try
                {
                    SendMail(oDocument);
                }
                catch (Exception ex)
                {
                    _traceManager.LogInfo(string.Format("Error al enviar el Correo electronico. Error: {0}", ex.Message), LogType.Notify);
                }


                return oDocument;

            }
            catch (Exception ex)
            {
                throw new Exception("EjecutarWorkFlow", ex);
            }
        }
        /// <summary>
        /// Evalua la expresiÃ³n retornando el nombre del usuario responsable  como producto de la verificaciÃ³n
        /// </summary>
        /// <param name="role"></param>
        /// <param name="idDocument"></param>
        /// <param name="dt"></param>
        /// <returns></returns>
        private TBL_Admin_Usuarios RetornarSiguienteUsuarioResponsable(string role, int idDocument, DataTable dt)
        {

            if (string.IsNullOrEmpty(role)) return null;

            var m = DefinedRegexEvaluation.Function.Match(role.Trim()); // todo: expresion a  evaluar: [FN]("x" == "10" &&  "t" == "23") ?  [RESPONSABLE] : [AUTOR] [/FN]
            if (m.Success)
            {
                var roleResponsable = _workFlowDomainServices.MapearAndejecutaExpresion(role, dt);
                m = DefinedRegexEvaluation.Autor.Match(roleResponsable);
                if (m.Success)
                {
                    var user = _usuariosRepository.RetornarUsuarioAutordocumento(idDocument);
                    if (user != null)
                    {
                        return user;
                    }
                }
            }

            m = DefinedRegexEvaluation.Rol.Match(role.Trim());
            if(m.Success)
            {
                var userrole = _usuariosRepository.RetornarUsuarioReponsableAprobacion(m.Groups[1].Value);
                return userrole;
            }

            m = DefinedRegexEvaluation.Field.Match(role.Trim());
            if(m.Success)
            {
                var value = _workFlowDomainServices.MapearExpresion(m.Groups[1].Value, dt);
                if(!string.IsNullOrEmpty(value))
                {
                    var user = _usuariosRepository.GetUsuarioById(Convert.ToInt32(value));
                    return user;
                }
            }

            return null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idPedido"></param>
        /// <returns></returns>
        private TBL_Admin_Usuarios RetornarResponsableDocumento(int idPedido)
        {

            var user = _usuariosRepository.RetornarUsuarioResponsabledocumento(idPedido);
            return user;
        }
        /// <summary>
        /// Realiza el proceso de validaciÃ³n de campos con base a las reglas definidas en la tabla FieldValidations.
        /// </summary>
        /// <param name="oEstado"></param>
        /// <param name="oDoc"></param>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        private bool ValidacionDeCampos(TBL_Admin_EstadosProceso oEstado, TBL_ModuloReclamos_Reclamo oDoc, RenderTypeControlButtonDto oDocument)
        {
            var isValidFields = _workFlowDomainFieldsValidatorServices.IsValidField(oDoc, oEstado);
            if (!isValidFields)
            {
                var listErrors = _workFlowDomainFieldsValidatorServices.GetValidationErrorsMessages;

                var procedimientos = _workFlowDomainFieldsValidatorServices.GetStoreProceduresValidadtionFunctions;
                if (procedimientos.Count > 0)
                {
                    listErrors.AddRange(from procedimiento in procedimientos
                                        let result = EjecutarSp(procedimiento, oDocument.IdDocument)
                                        where !result
                                        select string.Format("SP:[{0}] - Mensaje:[{1}]", procedimiento, "La validaciÃ³n a travÃ©z de la funciÃ³n externa no fue exitosa!!."));
                }

                oDocument.MessagesError = listErrors;
            }

            return isValidFields;
        }

        private bool ValidacionDeCampos<TEntity, TEntityRules>(TEntity item, TEntityRules rules, RenderTypeControlButtonDto oDocument)
            where TEntity : class
            where TEntityRules : class
        {
            var isValidFields = _workFlowDomainFieldsValidatorServices.IsValidField(item, rules);
            if (!isValidFields)
            {
                var listErrors = _workFlowDomainFieldsValidatorServices.GetValidationErrorsMessages;

                var procedimientos = _workFlowDomainFieldsValidatorServices.GetStoreProceduresValidadtionFunctions;
                if (procedimientos.Count > 0)
                {
                    listErrors.AddRange(from procedimiento in procedimientos
                                        let result = EjecutarSp(procedimiento, oDocument.IdDocument)
                                        where !result
                                        select string.Format("SP:[{0}] - Mensaje:[{1}]", procedimiento, "La validaciÃ³n a travÃ©z de la funciÃ³n externa no fue exitosa!!."));
                }

                oDocument.MessagesError = listErrors;
            }

            return isValidFields;
        }

        /// <summary>
        /// FunciÃ³n que ejecuta procedimientos almacenados con AdoNet Garantizando siempre que los Sp invocados, van a retornar true o false
        /// </summary>
        /// <param name="sp"></param>
        /// <param name="idDocument"></param>
        /// <returns></returns>
        private bool EjecutarSp(string sp,string idDocument)
        {
            var parameters = new Dictionary<string, string> { { "IdReclamo", idDocument } };
            var result = _sqlReclamosServices.EjecutarSpToBool(sp, parameters);
            return Convert.ToBoolean(result);
          
        }

        /// <summary>
        /// El parÃ¡metro mÃ­nimo que de debe enviar al servicio de ejecuciÃ³n de funciones del sistema debe ser el Id del Documento
        /// Si por alguna razÃ³n es necesario algun parÃ¡metro adicional, se deberÃ¡n implemetar las reglas de negocio dentro de la clase
        /// que invoca el mÃ©todo que realiza la validaciÃ³n. 
        /// 
        /// </summary>
        /// <param name="accionesSistema"></param>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        private List<string> EjecutarAccionSistema(IEnumerable<TBL_ModuloWorkFlow_ValidacionesSalida> accionesSistema, IDocumentDto oDocument)
        {
            try
            {
                var messages = new List<string>();

                foreach (var salida in accionesSistema)
                {
                    _systemActionsServices.AssemblyQualifiedName = salida.NombreEnsamblado;
                    _systemActionsServices.MethodName = salida.NombreMetodo;
                    _systemActionsServices.Params = new object[] { oDocument };

                    var result = _systemActionsServices.Execute();

                    if (result is bool)
                    {
                        if (!Convert.ToBoolean(result))
                            messages = _systemActionsServices.GetListErrors;
                    }
                }

                return messages;
            }
            catch (Exception ex)
            {
                throw new Exception("EjecutarAccionSistema", ex);
            }
        }

        /// <summary>
        /// Recoge en una lista el nombre de las funciones que se deben ejecutar como una ventana de mensaje desde la interface grafica.
        /// </summary>
        /// <param name="oDocument"></param>
        /// <param name="ovalidaciones"></param>
        /// <param name="item"></param>
        private  void ProcesarParametrosEntrada<TEntity>(
            RenderTypeControlButtonDto oDocument, 
            IEnumerable<TBL_ModuloWorkFlow_ValidacionesSalida> ovalidaciones,
            TEntity item) where TEntity : class
        {
           
            var inputList = new List<string>();
            foreach (var salida in ovalidaciones)
            {

                var m = DefinedRegexEvaluation.Condition.Match(salida.NombreEnsamblado);
                if(m.Success)
                {
                    var condicion = m.Groups[1].Value;
                    if(string.IsNullOrEmpty(condicion))
                    {
                        oDocument.MessagesError = new List<string>{string.Format("Error de lectura de la condiciÃ³n de validaciÃ³n para la ruta {0}",salida.IdRuta)};
                        continue;
                    }
                    var result = _workFlowDomainFieldsValidatorServices.MappingAndValidField(item, condicion);
                    if(result)
                    {
                        m = DefinedRegexEvaluation.InputParameters.Match(salida.NombreMetodo);
                        if (m.Success)
                        {
                            inputList.Add(m.Groups[1].Value);
                        }
                    }
                }
                else
                {
                    m = DefinedRegexEvaluation.InputParameters.Match(salida.NombreMetodo);
                    if (m.Success)
                    {
                        inputList.Add(m.Groups[1].Value);
                    }
                }
            }

            oDocument.OutputParameters = inputList;
        }

       

        /// <summary>
        /// Crea un nuevo registro en el trackin del pedido
        /// </summary>
        /// <param name="oDocument"></param>
        private void GenerarEntradatracking(RenderTypeControlButtonDto oDocument)
        {

            var userSession = _autenticationService.GetUserFromSession;
            var oTrack = _reclamosDomainServices.GenerarObjetoTrack
                (_trackRepository.NewEntity(), 
                oDocument.TextControl,
                oDocument.CurrentStatus,
                Convert.ToInt32(oDocument.IdDocument), 
                oDocument.NextStatus,
                oDocument.NextResponsibe, 
                userSession);
            _trackRepository.Add(oTrack);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="oDocument"></param>
        private void GenerarEntradalog(RenderTypeControlButtonDto oDocument)
        {
            var userSession = _autenticationService.GetUserFromSession;
            var oLog = _reclamosDomainServices.GenerarObjetoLog(_logDocumentosRepository.NewEntity(),
                                                                     oDocument.TextControl,
                                                                     Convert.ToInt32(oDocument.IdDocument), userSession);
            _logDocumentosRepository.Add(oLog);
        }

        private void GenerarEntradalog(RenderTypeControlButtonDto oDocument, string comentario)
        {
            var userSession = _autenticationService.GetUserFromSession;
            var oLog = _reclamosDomainServices.GenerarObjetoLog(_logDocumentosRepository.NewEntity(),
                                                                     oDocument.TextControl,
                                                                     Convert.ToInt32(oDocument.IdDocument), userSession,comentario);
            _logDocumentosRepository.Add(oLog);
        }

        private void GenerarEntradalog(string mensaje, decimal idreclamo)
        {
            var userSession = _autenticationService.GetUserFromSession;
            var oLog = _reclamosDomainServices.GenerarObjetoLog(_logDocumentosRepository.NewEntity(), idreclamo, userSession, mensaje);
            _logDocumentosRepository.Add(oLog);
        }

        /// <summary>
        /// EnvÃ­a una notificaciÃ³n al responsable del documento al correo electronico.
        /// </summary>
        /// <param name="oDocument"></param>
        /// <returns></returns>
        private bool SendMail(RenderTypeControlButtonDto oDocument)
        {
            var userSession = _autenticationService.GetUserFromSession;
             _sendMailNotificationServices.EnviarCorreoElectronicoNotificacion(oDocument, userSession);

           switch (oDocument.CurrentStatus)
           {
               case "Borrador":
                   _sendMailNotificationServices.EnviarCorreoelectronicoAsesoresJefe(oDocument, userSession);
                   break;
               case "Cierre del Plan de AcciÃ³n":
                   _sendMailNotificationServices.EnviarCorreoelectronicoAutorReclamo(oDocument, userSession);
                   break;
           }

           if (oDocument.CurrentStatus == "En RevisiÃ³n CC" && oDocument.TipoReclamo == "Servicio")
            {
                userSession = _autenticationService.GetUserFromSession;
                _sendMailNotificationServices.EnviarCorreoElectronicoNotificacionCliente(oDocument, userSession);
            }


            return true;
        }

        /// <summary>
        /// Crea un nuevo registro en la tabla de notificaciones para el usuario responsable del documento.
        /// </summary>
        private void GenerarNotificacionSistema(RenderTypeControlButtonDto oDocument)
        {
            var userSession = _autenticationService.GetUserFromSession;
            var template = _sendMailNotificationServices.GetMergeTemplate(oDocument);
            if(template == null)return;

            var unitOfWork = _notificacionesSistemaRepository.UnitOfWork;

            var oNotify = _reclamosDomainServices.GenerarEntradaNotificadorSistema(
                                       _notificacionesSistemaRepository.NewEntity(),
                                       Convert.ToInt32(oDocument.IdCurrentResponsibe),
                                       template, userSession);

            _notificacionesSistemaRepository.Add(oNotify);

            unitOfWork.CommitAndRefreshChanges();

        }


        #region IDisposable Members

        /// <summary>
        /// Release all resources
        /// </summary>
        public void Dispose()
        {
            //release used unit of work
            //if you have many repositories but  lifetime is per resolve only need
            //dispose one

            if (_tblModuloWorkFlowRutasRepository != null)
            {
                _tblModuloWorkFlowRutasRepository.UnitOfWork.Dispose();
            }
        }

        #endregion
    }
}
    