//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

using Domain.Core.Entities;

namespace Domain.MainModules.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TBL_Admin_Departamentos))]
    
    public partial class TBL_Admin_Ciudades: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdCiudad
        {
            get { return _idCiudad; }
            set
            {
                if (_idCiudad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdCiudad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idCiudad = value;
                    OnPropertyChanged("IdCiudad");
                }
            }
        }
        private int _idCiudad;
    
        [DataMember]
        public int IdDepartamento
        {
            get { return _idDepartamento; }
            set
            {
                if (_idDepartamento != value)
                {
                    ChangeTracker.RecordOriginalValue("IdDepartamento", _idDepartamento);
                    if (!IsDeserializing)
                    {
                        if (TBL_Admin_Departamentos != null && TBL_Admin_Departamentos.IdDepartamento != value)
                        {
                            TBL_Admin_Departamentos = null;
                        }
                    }
                    _idDepartamento = value;
                    OnPropertyChanged("IdDepartamento");
                }
            }
        }
        private int _idDepartamento;
    
        [DataMember]
        public string Codigo
        {
            get { return _codigo; }
            set
            {
                if (_codigo != value)
                {
                    _codigo = value;
                    OnPropertyChanged("Codigo");
                }
            }
        }
        private string _codigo;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string CreateBy
        {
            get { return _createBy; }
            set
            {
                if (_createBy != value)
                {
                    _createBy = value;
                    OnPropertyChanged("CreateBy");
                }
            }
        }
        private string _createBy;
    
        [DataMember]
        public Nullable<System.DateTime> CreateOn
        {
            get { return _createOn; }
            set
            {
                if (_createOn != value)
                {
                    _createOn = value;
                    OnPropertyChanged("CreateOn");
                }
            }
        }
        private Nullable<System.DateTime> _createOn;
    
        [DataMember]
        public string ModifiedBy
        {
            get { return _modifiedBy; }
            set
            {
                if (_modifiedBy != value)
                {
                    _modifiedBy = value;
                    OnPropertyChanged("ModifiedBy");
                }
            }
        }
        private string _modifiedBy;
    
        [DataMember]
        public Nullable<System.DateTime> ModifiedOn
        {
            get { return _modifiedOn; }
            set
            {
                if (_modifiedOn != value)
                {
                    _modifiedOn = value;
                    OnPropertyChanged("ModifiedOn");
                }
            }
        }
        private Nullable<System.DateTime> _modifiedOn;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TBL_Admin_Departamentos TBL_Admin_Departamentos
        {
            get { return _tBL_Admin_Departamentos; }
            set
            {
                if (!ReferenceEquals(_tBL_Admin_Departamentos, value))
                {
                    var previousValue = _tBL_Admin_Departamentos;
                    _tBL_Admin_Departamentos = value;
                    FixupTBL_Admin_Departamentos(previousValue);
                    OnNavigationPropertyChanged("TBL_Admin_Departamentos");
                }
            }
        }
        private TBL_Admin_Departamentos _tBL_Admin_Departamentos;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TBL_Admin_Departamentos = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTBL_Admin_Departamentos(TBL_Admin_Departamentos previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TBL_Admin_Ciudades.Contains(this))
            {
                previousValue.TBL_Admin_Ciudades.Remove(this);
            }
    
            if (TBL_Admin_Departamentos != null)
            {
                if (!TBL_Admin_Departamentos.TBL_Admin_Ciudades.Contains(this))
                {
                    TBL_Admin_Departamentos.TBL_Admin_Ciudades.Add(this);
                }
    
                IdDepartamento = TBL_Admin_Departamentos.IdDepartamento;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TBL_Admin_Departamentos")
                    && (ChangeTracker.OriginalValues["TBL_Admin_Departamentos"] == TBL_Admin_Departamentos))
                {
                    ChangeTracker.OriginalValues.Remove("TBL_Admin_Departamentos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TBL_Admin_Departamentos", previousValue);
                }
                if (TBL_Admin_Departamentos != null && !TBL_Admin_Departamentos.ChangeTracker.ChangeTrackingEnabled)
                {
                    TBL_Admin_Departamentos.StartTracking();
                }
            }
        }

        #endregion
    }
}
